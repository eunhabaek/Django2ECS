# This is a basic workflow to help you get started with Actions

name: CI-pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: eunhadjango
  ECS_SERVICE: eunhaservice
  ECS_CLUSTER: eunhacluster
  ECS_TASK_DEFINITION: ./task-definition.json
  CONTAINER_NAME: eunhacontainer

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  run-test-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2 #python 3.8은 v2
        with:
          python-version: "3.8"
      - run: pip install -r requirements.txt
  build:
    needs: [run-test-code] # 이 코드 실행 후에 빌드 함
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up python 3.10
        uses: actions/setup-python@v4 #python 3.10은 v4
        with:
          python-version: "3.10"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build Docker Compose
        run: docker-compose
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::682971737440:role/eunhaaction
          role-session-name: sampleSessionName
          aws-region: ap-northeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >>$GITHUB_OUTPUT
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-taskdefinition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-taskdefinition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # - name: Login to Docker
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{secrets.DOCKER_USERNAME}}
      #     password: ${{secrets.DOCKER_TOKEN}}
      # - name: build and release to DockerHub
      #   env:
      #     NAME: ${{secrets.DOCKER_USERNAME}}
      #     REPO: dockerdjango
      #   run: | 
      #     docker build -t $REPO .
      #     docker tag $REPO:latest $NAME/$REPO:latest
      #     docker push $NAME/$REPO:latest